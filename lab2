<#
    Created By: Christopher Sprague
    Purpose: To gather basic info about current computer & check for a file on a remote server
    Date Origionally Created: 10/17/2023
    Current Version Date: 10/29/2023
    Current Version 1.4
    *Major Features
        *Sub-Features
    --------------------------------------
    Test-File (1.0)
        Converted into a function (1.1)
        Allow Array Inputs (1.2)
        Accept Pipeline Objects (1.3)
    Check-ADFeature Function (1.4)
        Allow Array Inputs (1.4)
        Accept Pipeline Objects (1.4)
         
#>


    
function Test-File {
    [CmdletBinding()]
    param (
        [parameter(ValueFromPipeline)]
        [string[]]$FilePaths = ‘C:\imhere.txt’,

        [parameter(Mandatory,ValueFromPipeline)]
        [string[]]$ComputerName,

        [parameter(Mandatory)]
        [pscredential]$Credential
    )

    #Process block that enables the script to process a pipe in the loop
    Begin {
        $user = whoami
        $Date = Get-Date -Format MM-dd-yyyy
        $Content = "$user created file on $Date"
        $username = "administrator"
        $password = ConvertTo-SecureString "P@ssword" -AsPlainText -Force
        $Cred = New-Object System.Management.Automation.PSCredential ($username, $password) 
        $Session = New-PSSession -ComputerName $ComputerName -Credential $Cred
    }

    Process {
        $FileScriptBlock = {
            param (
                [string[]]$FilePaths,
                [string]$Content
            )

            #Run a loop for each file specified, test if it exists, if not then create
            foreach ($FilePath in $FilePaths) {
                if (Test-Path -Path $FilePath -PathType Leaf) {
                    Write-Output "The file $FilePath exists."
                } else {
                    Write-Output "The file $FilePath does not exist. Creating it..."
                    New-Item -Path $FilePath -ItemType File -Force  
                    Write-Output "$Content" | Out-File $FilePath -Append
                }
            }
        }

                #Execute the script block on the remote computer
                Invoke-Command -Session $Session -ScriptBlock $FileScriptBlock -ArgumentList $FilePaths, $Content
    }
}


<# Function to Check if the provided service is installed on a provided remote server
    To run the function, type the command:
        Check-ADFeature -ComputerName 'ComputerName' -Credential $Credential -FeatureName FeatureName
        or (-ComputerName and -FeatureName accepts an array of names)
        Check-ADFeature -ComputerName 'ComputerName1','ComputerName2' -Credential $Credential -FeatureName 'Feature1','Feature2'
        or (-ComputerName names can be piped)
        'ComputerName1','ComputerName2' | Check-ADFeature -Credential $Credential
#>
function Check-ADFeature {
    [CmdletBinding()]
    param (
        [Parameter(Mandatory,ValueFromPipeline)]
        [string[]]$ComputerName,

        [Parameter(Mandatory)]
        [pscredential]$Credential,

        [Parameter(Mandatory)]
        [string[]]$FeatureName = 'AD-Domain-Services'
    )

    #Will check each remote server provided and run 'Get-WindowsFeature' to identidy if the service proveded is installed
    Process {
        foreach ($Computer in $ComputerName) {
            try {
                $Session = New-PSSession -ComputerName $Computer -Credential $Credential -ErrorAction Stop
            } catch {
                Write-Error "Error connecting to $Computer. Details: $($_.Exception.Message)"
                continue
            }

            #This will cycle through all of the Features provided
            foreach ($Feature in $FeatureName) {
                $ServicesScriptBlock = {
                    param($Feature)
                    try {
                        $adFeature = Get-WindowsFeature -Name $Feature -ErrorAction Stop
                    } catch {
                        Write-Output "Error checking $Computer. Details: $($_.Exception.Message)"
                        return
                    }

                    if ($adFeature.InstallState -eq 'Installed') {
                        Write-Output "$Feature is installed on $env:COMPUTERNAME."
                    } else {
                        Write-Output "$Feature is NOT installed on $env:COMPUTERNAME."   
                    }
                } 

                Invoke-Command -Session $Session -ScriptBlock $ServicesScriptBlock -ArgumentList $Feature,$Computer
            }

            Remove-PSSession -Session $Session
        }
    }
}
#END OF SCRIPT 
