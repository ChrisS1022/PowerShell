
<#
    Created By: Christopher Sprague
    Purpose:    This script run on a remote server and check if a file exists and if not, copies it from a shared file; Install AD-Domain-Services; and deploy a forest.
    Date Origionally Created: 11/24/2023
    Current Version Date: 11/24/2023
    Current Version 1.0
    *Major Features
        *Sub-Features
    --------------------------------------

#>

<#
    Part 1:
    Test if ADBuild_PS.csv exists on the remote computer.
#>

# Variables
# Remove the hardset variables and uncomment the Read-Host lines to prompt for input if needed.
    $Computer = 'Sprague-DC1'
    # $Computer = Read-Host -Prompt 'Enter the name of the computer you want to connect to.'
    $Username = 'administrator'
    $Password = ConvertTo-SecureString 'P@ssword' -AsPlainText -Force
    $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $Username, $Password
    # $Credential = Get-Credential -Message 'Enter the credentials you want to use to connect to the remote computer.'
    $FilePath = 'C:\ADBuild_PS.csv'
    # $FilePath = Read-Host -Prompt 'Enter the path to the file you want to check.'
    $getFile = '\\ADVSCR-FS1\ActiveDirectory\ADBuild_PS.csv'
    # getFile = Read-Host -Prompt 'Enter the path to the file you want to copy to the remote computer.'

# Test connection to remote computer.
    try {
        $Session = New-PSSession -ComputerName $Computer -Credential $Credential
    }
    catch {
        Write-Error "Error connecting to $Computer. Details: $($_.Exception.Message)"
        Exit
    }

# Test if file exists on remote computer and if not, copy it from shared file.
    try {
        Prep-PowerADDeploy -FilePaths $FilePath -FileToCopy $getFile -ComputerName $Computer -Credential $Credential
    }
    catch {
        Write-Error "Error checking $Computer. Details: $($_.Exception.Message)" 
        Exit
    }

################################################################################################################################

<#
    Part 2:
    Install AD-Domain-Services on the remote computer.
#>

# Variables
# Remove the hardset variables and uncomment the Read-Host lines to prompt for input if needed.
    # Features (AD-Domain-Services, RSAT-AD-Tools, RSAT-ADDS, RSAT-AD-AdminCenter, RSAT-AD-PowerShell)
    $Feature = 'AD-Domain-Services','RSAT-AD-Tools','RSAT-ADDS','RSAT-AD-AdminCenter'
    # $Feature = Read-Host -Prompt 'Enter the name of the feature you want to install.'

# Install AD-Domain-Services on the remote computer.
    try {
        Install-PowerADDeploy -ComputerName $Computer -Credential $Credential -FeatureName $Feature
    }
    catch {
        Write-Error "Error installing AD-Domain-Services on $Computer. Details: $($_.Exception.Message)"
        Exit
    }

################################################################################################################################

<#
    Part 3:
    Deploy a forest on the remote machine
#>

# Variables
# Remove the hardset variables and uncomment the Read-Host lines to prompt for input if needed.
    $DomainName = 'Sprague.local'
    # $DomainName = Read-Host -Prompt 'Enter the name of the domain you want to create.'
    $SafePassword = ConvertTo-SecureString 'P@ssword' -AsPlainText -Force
    # $SafePassword = Read-Host -Prompt 'Enter the password you want to use for the SafeModeAdministrator account.'

# Deploy a forest on the remote machine
    try {
        New-PowerADDeploy -ComputerName $Computer -Credential $Credential -DomainName $DomainName -SafeModePassword $SafePassword 
    }
    catch {
        Write-Error "Error deploying a forest on $Computer. Details: $($_.Exception.Message)"
        Exit
    }

################################################################################################################################

# Remote server should reboot after the forest is deployed.  Test if the server is back online. Then Continue script.
# Variables
    $MaxRetries = 50
    $RetryCount = 0

# Wait for the computer to restart
$RetryCount = 0
do {
    $isServerOnline = Test-NetConnection -ComputerName $Computer -InformationLevel Quiet -ErrorAction SilentlyContinue
    if (-not $isServerOnline) {
        Start-Sleep -Seconds 5
        $RetryCount++
    }
    if ($RetryCount -ge $MaxRetries) {
        Write-Error "$Computer is not back online after $MaxRetries retries."
        Exit
    }
} while (-not $isServerOnline)

# Wait for Active Directory to become operational
$RetryCount = 0
do {
    $adServiceStatus = Get-WmiObject -ComputerName $Computer -Class Win32_Service -Filter "Name='NTDS'" -ErrorAction SilentlyContinue
    $isADServiceRunning = $adServiceStatus.State -eq "Running"
    if (-not $isADServiceRunning) {
        Start-Sleep -Seconds 5
        $RetryCount++
    }
    if ($RetryCount -ge $MaxRetries) {
        Write-Error "Active Directory is not operational after $MaxRetries retries."
        Exit
    }
} while (-not $isADServiceRunning)

# Continue script
Write-Host "$Computer is back online and Active Directory is operational."
