<#
    Created By: Christopher Sprague
    Purpose: To gather basic info about current computer & check for a file on a remote server
    Date Created: 10/17/2023
    Version 1.3
    Converted into a function (1.1)
    Allow Array Inputs (1.2)
    Accept Pipeline Objects (1.3)
#>



        function Test-File {
            [CmdletBinding()]
                param (
                    [parameter(ValueFromPipeline)]
                    [string[]]$FilePaths = ‘C:\imhere.txt’,

                    [parameter(Mandatory)]
                    [string]$ComputerName,

                    [parameter(Mandatory)]
                    [pscredential]$Credential
                )
            #Process block that enables the script to process a pipe in the loop
            Begin {
                $user = whoami
                $Date = Get-Date -Format MM-dd-yyyy
                $Content = "$user created file on $Date"
                $username = "administrator"
                $password = ConvertTo-SecureString "P@ssword" -AsPlainText -Force
                $Cred = New-Object System.Management.Automation.PSCredential ($username, $password) 
                $Session = New-PSSession -ComputerName $ComputerName -Credential $Cred
            }

            Process {
                $FileScriptBlock = {
                param (
                    [string[]]$FilePaths,
                    [string]$Content
                )
                    #Run a loop for each file specified, test if it exists, if not then create
                    foreach ($FilePath in $FilePaths) {
                        if (Test-Path -Path $FilePath -PathType Leaf) {
                            Write-Output "The file $FilePath exists."
                        } else {
                            Write-Output "The file $FilePath does not exist. Creating it..."
                            New-Item -Path $FilePath -ItemType File -Force  
                            Write-Output "$Content" | Out-File $FilePath -Append
                        }
                    }
                }

                #Execute the script block on the remote computer
                Invoke-Command -Session $Session -ScriptBlock $FileScriptBlock -ArgumentList $FilePaths, $Content
            }

        }




#END OF SCRIPT 
